create table branch(branch_name varchar(50) primary key,branch_city varchar(50),assets int);
create table account(account_number varchar(5) primary key ,branch_name varchar(50) references branch(branch_name),balance int);
create table loan(loan_number varchar(4) primary key ,branch_name varchar(50) references branch(branch_name),amount int);
create table customer(customer_name varchar(50) primary key,customer_street varchar(50),customer_city varchar(50));
create table borrower(customer_name varchar(50) references customer(customer_name),loan_number varchar(4) references loan(loan_number),primary key(customer_name,loan_number));
create table depositor(customer_name varchar(50) references customer(customer_name),account_number varchar(5) references account(account_number),primary key(customer_name,account_number));


borrower->loan->branch;


-------------------------1------------------------------------------------------ 
create or replace borrowerDetailsA2Q1 as

 
declare
	totalLoanAmount int:=0;
	
	cursor cur_customer is select customer_name from customer;
	rec_customer cur_customer%rowtype;
	
	cursor cur_borrower(cname customer.customer_name%type) is select * from borrower where customer_name=cname;
	rec_borrower cur_borrower%rowtype;
	
	--Loan
	cursor cur_loan(ln loan.loan_number%type) is select * from loan where loan_number=ln;
	rec_loan cur_loan%rowtype;
	
	--branch
	cursor cur_branchCity(bn branch.branch_name%type) is select branch_city from branch where branch_name=bn;
	rec_branchCity cur_branchCity%rowtype;
	
begin
	for rec_customer in cur_customer loop
		totalLoanAmount:=0;
		dbms_output.put_line('Borrower name: '||rec_customer.customer_name);
		dbms_output.put_line('Loan No		 Branch Name		 Branch City		 Loan Amount');
		for rec_borrower in cur_borrower(rec_customer.customer_name) loop
			
			for rec_loan in cur_loan(rec_borrower.loan_number) loop
				--BRANCH_NAME IS PRIMAY KEY IN BRANCH THEREFORE IT IS UNIQUE
				for rec_branchCity in cur_branchCity(rec_loan.branch_name) loop
					dbms_output.put_line(rec_loan.loan_number||' '||rec_loan.branch_name||' '||rec_branchCity.branch_city||' '|| rec_loan.amount);
				end loop;
				totalLoanAmount:=totalLoanAmount+rec_loan.amount;
			end loop;
		end loop;
		if(totalLoanAmount!=0) then
			dbms_output.put_line('Total loan amount of borrower '||rec_customer.customer_name||': '||totalLoanAmount);
		end if;
	end loop;
end;
/
	
	
	
	
-------------------------1 again------------------------------------------------------ 
create or replace procedure borrowerDetailsA2Q1 as

 
--declare
	totalLoanAmount int:=0;
	
	
	
	cursor cur_borrower is select distinct customer_name from borrower;
	rec_borrower cur_borrower%rowtype;
	
	--Loan number
	cursor cur_loanNumber(cname customer.customer_name%type) is select * from borrower where customer_name=cname;
	rec_loanNumber cur_loanNumber%rowtype;
	
	
	cursor cur_loan(ln loan.loan_number%type) is select * from loan where loan_number=ln;
	rec_loan cur_loan%rowtype;
	
	--branch
	cursor cur_branchCity(bn branch.branch_name%type) is select branch_city from branch where branch_name=bn;
	rec_branchCity cur_branchCity%rowtype;
	
begin
	for rec_borrower in cur_borrower loop
		totalLoanAmount:=0;
		dbms_output.put_line('Borrower name: '||rec_borrower.customer_name);
		dbms_output.put_line('Loan No		 Branch Name		 Branch City		 Loan Amount');
		for rec_loanNumber in cur_loanNumber(rec_borrower.customer_name) loop
			
			for rec_loan in cur_loan(rec_loanNumber.loan_number) loop
				--BRANCH_NAME IS PRIMAY KEY IN BRANCH THEREFORE IT IS UNIQUE
				for rec_branchCity in cur_branchCity(rec_loan.branch_name) loop
					dbms_output.put_line(rec_loan.loan_number||' '||rec_loan.branch_name||' '||rec_branchCity.branch_city||' '|| rec_loan.amount);
				end loop;
				totalLoanAmount:=totalLoanAmount+rec_loan.amount;
			end loop;
		end loop;
		if(totalLoanAmount!=0) then
			dbms_output.put_line('Total loan amount of borrower '||rec_borrower.customer_name||': '||totalLoanAmount||chr(10));
		end if;
	end loop;
end;
/
		
	
	

	
	
	
	
	
	
	
	
	
	
	
------------------------------------------------------2nd question------------------------------------------------------
2. Create a procedure which will display city-wise branch-wise loan details of borrowers in the 
following format.City : <city name1>
 Branch Name : <branch name1>
 Borrower Name :<borrower name1>
 Loan No Loan Amount
 ______________________________________________________
 ______________________________________________________


//create or replace city_with_branch_loan_details as

declare 
	totalAmountAtBranch int :=0;
	totalAmountAtCity int :=0;
	
	cursor cur_branchCity is select distinct branch_city from branch;
	rec_branchCity cur_branchCity%rowtype;
	
	cursor cur_branchName(bc branch.branch_city%type) is select branch_name from branch where branch_city=bc;
	rec_branchName cur_branchName%rowtype;
	
	cursor cur_loanNumber(bn branch.branch_name%type) is select loan_number from loan where branch_name=bn;
	rec_loanNumber cur_loanNumber%rowtype;
	
	cursor cur_borrowerName(ln loan.loan_number%type) is select customer_name from borrower where loan_number=ln;
	rec_borrowerName cur_borrowerName%rowtype;
begin
	for rec_branchCity in cur_branchCity loop
		dbms_output.put_line('City : '||rec_branchCity.branch_city);
		for rec_branchName in cur_branchName(rec_branchCity.branch_city) loop
			dbms_output.put_line('Branch Name :'||rec_branchName.branch_name);
			for rec_loanNumber in cur_loanNumber(rec_branchName.branch_name) loop
				for rec_borrowerName in cur_borrowerName loop
					Borrower Name :<borrower name1>
					dbms_output.put_line('Borrower Name :'||rec_borrowerName.borrowerName);
							Loan No Loan Amount
				end loop;
			end loop;
		end loop;
	end loop;
end;
/


------------------------------------------------------3rd question------------------------------------------------------
	
	
	
------------------------------------------------------------------------------------------------------------	
	
------------------------------------------------------4th question------------------------------------------------------
	
4. Write a procedure to display details of the customers who are depositors as well as borrowers

--create or replace procedure customerBothBD_A2Q4 as
declare
	i int:=1;
	cursor cur_BothBorroAndDepo is select distinct c.customer_name,c.customer_street,c.customer_city from customer c,borrower b,depositor d where c.customer_name=b.customer_name and c.customer_name=d.customer_name;
	rec_BothBorroAndDepo cur_BothBorroAndDepo%rowtype;
begin
	dbms_output.put_line('-------------------------------------------');	
	dbms_output.put_line('customer_name customer_street customer_city');	
	dbms_output.put_line('-------------------------------------------');	
	for rec_BothBorroAndDepo in cur_BothBorroAndDepo loop
		dbms_output.put_line(rec_BothBorroAndDepo.customer_name||' '||rec_BothBorroAndDepo.customer_street||' '||rec_BothBorroAndDepo.customer_city);
	end loop;
end;
/



------------------------------------------------------5th question------------------------------------------------------
--5. Write a function with parameter branch name. Return total no. of customers of that branch.

create or replace function totCustA2Q5(bn branch.branch_name%type) return int as
--declare
		totalCustomer int:=0;
		flag int:=0;
		cursor cur_borrower is select distinct customer_name from borrower where borrower.loan_number in  (select loan_number from loan where branch_name=bn );
		rec_borrower cur_borrower%rowtype;
		
		cursor cur_depositer is select distinct customer_name from depositor where depositor.account_number in  (select account_number from account where branch_name=bn );
		rec_depositer cur_depositer%rowtype;
begin
	for rec_borrower in cur_borrower loop
		totalCustomer:=totalCustomer+1;
	end loop;
	
	for rec_depositer in cur_depositer loop
		flag:=0;
		for rec_borrower in cur_borrower loop
			if(rec_borrower.customer_name=rec_depositer.customer_name) then
				flag:=1;
				exit;
			end if;
		end loop;
		if(flag!=1) then
			totalCustomer:=totalCustomer+1;
		end if;
	end loop;
	return totalCustomer;
end;
/
	
select totCustA2Q5('Downtown') TotalCustomer from dual;
select totCustA2Q5('Brighton') TotalCustomer from dual;
select totCustA2Q5('Round Hill') TotalCustomer from dual;

------------------------------------------------------------------------------------------------------------




------------------------------------------------------6th question------------------------------------------------------
6. Write a function with parameter city name. Return total no. of branches of that city.

create or replace function totalBranchesA2Q6 (ct branch.branch_city%type) return int as
	cursor cur_totalBranch is select count(branch_name) cnt from branch where branch_city=ct group by branch_city;
	rec_totalBranch cur_totalBranch%rowtype;
begin
	open cur_totalBranch;
	fetch cur_totalBranch into rec_totalBranch;
	return rec_totalBranch.cnt;
	close cur_totalBranch;
end;
/
select totalBranchesA2Q6('Horseneck') TotalBranch from dual;	
select totalBranchesA2Q6('Brooklyn') TotalBranch from dual;

------------------------------------------------------------------------------------------------------------	




------------------------------------------------------7th question------------------------------------------------------
	
	
	
------------------------------------------------------------------------------------------------------------	
------------------------------------------------------8th question------------------------------------------------------
8. Write a trigger to check balance amount when user inserts or updates balance in accounts table. 
If balance < 200, don’t allow to insert/update the record and display appropriate error message.

create or replace trigger chk_balanceA2Q8 before insert or update on account 
for each row	
begin 
	if(:new.balance<200) then
		raise_application_error(-20002,'-----Please enter balance greater than 200-------');
	end if;
	
end;
/
INSERT INTO account VALUES ('A-307', 'Round Hill', 150);
	
------------------------------------------------------------------------------------------------------------	


------------------------------------------------------9th question------------------------------------------------------
9. Create a table named city_assets with fields city_name and total_assets. 
Write a trigger which will insert/update a record in city_assets table when user inserts a new 
record in the branch table. city_assets table should contain total assets of each city. If the city is 
inserted for the first time in branch table, insert a new record for that city in the city_assets 
table. If the city which user is inserting in the branch table already exists in the city_assets table, 
update the amount in the city_assets table.


SQL> select branch_city,sum(assets) from branch group by branch_city;

BRANCH_CITY                                        SUM(ASSETS)
-------------------------------------------------- -----------
Horseneck                                             10100000
Brooklyn                                              16100000
Palo Alto                                              2100000
Bennington                                              300000
Rye                                                    3700000


create table city_assets(city_name varchar(50) primary key, total_assets int);


INSERT INTO city_assets values('Horseneck',10100000);
INSERT INTO city_assets values('Brooklyn',16100000);
INSERT INTO city_assets values('Palo Alto',2100000);
INSERT INTO city_assets values('Bennington',300000);
INSERT INTO city_assets values('Rye',3700000);


create or replace trigger tr_city_assetsA2Q9 before insert on branch
	for each row
	declare
	currentTotAssets int :=0;
	flag int:=0;
	cursor cur_city_assets is select * from city_assets;
	rec_city_assets cur_city_assets%rowtype;

begin 
	for rec_city_assets in cur_city_assets loop
		if(:new.branch_city=rec_city_assets.city_name) then
			flag:=1;
			currentTotAssets:=rec_city_assets.total_assets;
			exit;
		end if;
	end loop;
	if(flag=0) then
		INSERT INTO city_assets values(:new.branch_city,:new.assets);
	else
		update city_assets set total_assets=currentTotAssets + :new.assets where city_name= :new.branch_city;
	end if;
	
end;
/
INSERT INTO branch VALUES ('branch1', 'Ahmedabad', 4510000);
delete from branch where branch_name='branch1';
delete from city_assets where city_name='Ahmedabad';
	
INSERT INTO branch VALUES ('branch2', 'Brooklyn',10090);
delete from branch where branch_name='branch2';
update city_assets set total_assets=16100000 where city_name='Brooklyn';




------------------------------------------------------------------------------------------------------------	



------------------------------------------------------10th question------------------------------------------------------
10. Write a trigger which will insert details of user, current date and time in a table named 
“trapped” after user made any changes(insert/delete/update) in the borrower table on -
weekends and on weekdays between 10 pm to 6 am. The table trapped contains the fields 
user_name and date_time.

--SYSTIMESTAMP
create table trapped(user_name varchar(10),dt timestamp);

create or replace trigger tr_trappedA2Q10 after insert or delete or update on borrower
	for each row
	dt timestamp:=SYSTIMESTAMP;
	lower:=TO_TIMESTAMP('10');
	upper:=TO_TIMESTAMP('06');

begin
	 if (to_char(dt,'dy')='sat' or to_char(dt,'dy')='sun') then
		INSERT INTO trapped VALUES(user,dt);
	 elsif() then
	
	 end if;
end;
/
	
	
------------------------------------------------------------------------------------------------------------	



------------------------------------------------------11th question------------------------------------------------------
11. Write a trigger when any record is updated in the account table. When value of any field is 
updated, keep track of before and after values in the table “redolog_values” for each field of the 
account table. The redolog_values table contains the fields c_date, field_name, before_value
and after_value.	

create table redolog_values(c_date date, field_name varchar(20), before_value varchar(50),after_value varchar(50));


create or replace trigger tr_accntTrckA2Q11 after update on account
for each row
begin
	if(:old.account_number != :new.account_number) then
		INSERT INTO redolog_values VALUES(SYSDATE,'account_number',:old.account_number,:new.account_number);
	end if;
	if(:old.branch_name != :new.branch_name) then
		INSERT INTO redolog_values VALUES(SYSDATE,'branch_name',:old.branch_name,:new.branch_name);
	end if;
	if(:old.balance != :new.balance) then
		INSERT INTO redolog_values VALUES(SYSDATE,'balance',:old.balance,:new.balance);
	end if;
end;
/
update account set balance=350 where account_number='A-305';
------------------------------------------------------------------------------------------------------------	



------------------------------------------------------12th question------------------------------------------------------
	
	
	
------------------------------------------------------------------------------------------------------------	
